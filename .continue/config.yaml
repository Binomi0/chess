%YAML 1.1
---
name: continue-config
version: 0.0.1
schema: v1

model_defaults: &model_defaults
  provider: lmstudio
  apiBase: http://192.168.1.101:1234/v1

models:
  - name: Qwen Code Ollama
    provider: ollama
    model: qwen2.5-coder:7b-instruct-q8_0
    apiBase: http://192.168.1.101:11434
    roles:
      - chat
      - apply
      - edit
      - autocomplete

  - name: Nomic Embed Text
    provider: lmstudio
    model: nomic-ai/nomic-embed-text-v1.5-GGUF
    roles:
      - embed

  - name: 8Q DeepSeeK Coder V2 Lite Instruct
    <<: *model_defaults
    model: deepseek-coder-v2-lite-instruct@q8_0
    roles:
      - chat

  - name: 4Q DeepSeeK Coder V2 Lite Instruct
    <<: *model_defaults
    model: deepseek-coder-v2-lite-instruct@q4_0
    roles:
      - chat

  - name: Qwen 2.5 7B Instruct
    <<: *model_defaults
    model: qwen2.5-coder-7b-instruct
    roles:
      - chat
      - edit
      - apply

  - name: Qwen 2.5 3B 8Q
    <<: *model_defaults
    model: qwen2.5-coder-3b-instruct@q8_0
    roles:
      - autocomplete
      - chat
      - edit
      - apply

  - name: Qwen 2.5 3B 4Q
    <<: *model_defaults
    model: qwen2.5-coder-3b-instruct@q4_0
    roles:
      - autocomplete
      - chat
      - edit
      - apply

context:
  - provider: docs

  - provider: codebase
    params:
      nRetrieve: 30
      nFinal: 3

  - provider: code

  - provider: diff

  - provider: terminal

  - provider: problems

  - provider: folder

rules:
  - |
    Please provide concise answers. Don't explain obvious concepts. You can assume that I am knowledgable about most programming topics.
    - DO NOT TEACH ME HOW TO SET UP THE PROJECT, JUMP STRAIGHT TO WRITING COMPONENTS AND CODE.

prompts:
  - name: share
    description: Export the current chat session to markdown
    prompt: |
      Export the current chat session to markdown
  - name: cmd
    description: Generate a shell command
    prompt: Generate a shell command
  - name: test
    description: Write a test
    prompt: |
      {{{ input }}}Write a comprehensive set of unit tests for the selected code. It should setup, run tests that check for correctness including important edge cases, and teardown. Ensure that the tests are complete and sophisticated. Give the tests just as chat output, don't edit any file.
  - name: check
    description: Check for mistakes in my code
    prompt: |
      Please read the highlighted code and check for any mistakes. You should look for the following, and be extremely vigilant:
        - Syntax errors
        - Logic errors
        - Security vulnerabilities
        - Performance issues
        - Anything else that looks wrong

      Once you find an error, please explain it as clearly as possible, but without using extra words. For example, instead of saying 'I think there is a syntax error on line 5', you should say 'Syntax error on line 5'. Give your answer as one bullet point per mistake found.

docs:
  - name: Uniswap v3
    startUrl: https://docs.uniswap.org/contracts/v4/overview

  - name: WhatsApp Webhooks
    startUrl: https://developers.facebook.com/docs/whatsapp/business-management-api/guides/set-up-webhooks

  - name: uniswap v4
    startUrl: https://docs.uniswap.org/sdk/v4/reference/overview

mcpServers:
  - name: File System
    command: npx
    args:
      - "-y"
      - "@modelcontextprotocol/server-filesystem"
      - "/Users/bino/Projects/chess"

  - name: Prices
    command: npx
    args:
      - "-y"
      - "tsx"
      - "/Users/bino/Projects/continue/pool-prices/main.ts"
